; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: cmd.exe /d /c lein update-in :dependencies conj [nrepl,"0.8.3"] -- update-in :plugins conj [cider/cider-nrepl,"0.26.0"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉cellular-automata-clojure.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/board
clj꞉cellular-automata-clojure.core꞉> 
(0 0 0 0 0 0 0 0 0 0)
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.rules/apply-rule
clj꞉cellular-automata-clojure.rules꞉> 
nil
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/apply-rule
clj꞉cellular-automata-clojure.core꞉> 
; CompilerException java.lang.RuntimeException: No such var: rules/rule30, compiling:(d:\Productivity\Repositories\cellular-automata-clojure\src\cellular_automata_clojure\core.clj:9:1) 
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.rules/rule30
clj꞉cellular-automata-clojure.rules꞉> 
nil
clj꞉cellular-automata-clojure.rules꞉> 
0
clj꞉cellular-automata-clojure.core꞉> 
0
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/-main
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/apply-rule
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/-main
clj꞉cellular-automata-clojure.core꞉> 
0
clj꞉cellular-automata-clojure.core꞉> 
; CompilerException java.lang.RuntimeException: Unable to resolve symbol: apply-rule in this context, compiling:(d:\Productivity\Repositories\cellular-automata-clojure\src\cellular_automata_clojure\core.clj:15:1) 
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core-test/apply-rule
clj꞉cellular-automata-clojure.core-test꞉> 
0
clj꞉cellular-automata-clojure.core꞉> 
(((0 0 0 0 0 0 0 0 0 0)))
clj꞉cellular-automata-clojure.core꞉> 
()
clj꞉cellular-automata-clojure.core꞉> 
; ArityException Wrong number of args (3) passed to: core/partition-by  clojure.lang.AFn.throwArity (AFn.java:429)
clj꞉cellular-automata-clojure.core꞉> 
()
clj꞉cellular-automata-clojure.core꞉> 
()
clj꞉cellular-automata-clojure.core꞉> 
((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))
clj꞉cellular-automata-clojure.core꞉> 
((1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1) (0 1 1) (1 1 1) (1 1 0) (1 0 0) (0 0 0))
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/get-next-state
clj꞉cellular-automata-clojure.core꞉> 
((1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1) (0 1 1) (1 1 1) (1 1 0) (1 0 0) (0 0 0))
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/get-next-state
clj꞉cellular-automata-clojure.core꞉> 
0
clj꞉cellular-automata-clojure.core꞉> 
((1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1) (0 1 1) (1 1 1) (1 1 0) (1 0 0) (0 0 0))
clj꞉cellular-automata-clojure.core꞉> 
((1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1) (0 1 1) (1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1))
clj꞉cellular-automata-clojure.core꞉> 
((1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1) (0 1 1) (1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1))
clj꞉cellular-automata-clojure.core꞉> 
; IllegalArgumentException Don't know how to create ISeq from: cellular_automata_clojure.core$get_next_state$fn__7517  clojure.lang.RT.seqFrom (RT.java:550)
clj꞉cellular-automata-clojure.core꞉> 
; ClassCastException class java.lang.Long cannot be cast to class clojure.lang.IFn (java.lang.Long is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')  cellular-automata-clojure.core/eval7530 (form-init17837996772252830662.clj:18)
clj꞉cellular-automata-clojure.core꞉> 
; ClassCastException class java.lang.Long cannot be cast to class clojure.lang.IFn (java.lang.Long is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')  cellular-automata-clojure.core/eval7532 (form-init17837996772252830662.clj:18)
clj꞉cellular-automata-clojure.core꞉> 
0
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/get-next-state
clj꞉cellular-automata-clojure.core꞉> 
; IllegalArgumentException Don't know how to create ISeq from: cellular_automata_clojure.core$get_next_state$fn__7542  clojure.lang.RT.seqFrom (RT.java:550)
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/get-next-state
clj꞉cellular-automata-clojure.core꞉> 
(0 0 1 0 1 1 0 0 1 0)
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/get-next-state
clj꞉cellular-automata-clojure.core꞉> 
((1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1) (0 1 1) (1 1 1) (1 1 0) (1 0 0) (0 0 0) (0 0 1))
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/get-next-state
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/split-up
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/split-up
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/split-up
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/split-up
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/split-up
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/split-up
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/get-next-state
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/-main
clj꞉cellular-automata-clojure.core꞉> 
#'cellular-automata-clojure.core/-main
clj꞉cellular-automata-clojure.core꞉> 
