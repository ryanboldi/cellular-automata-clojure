; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: cmd.exe /d /c lein update-in :dependencies conj [nrepl,"0.8.3"] -- update-in :plugins conj [cider/cider-nrepl,"0.26.0"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉cellular-automata-clojure.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉cellular-automata-clojure.core꞉> 
; CompilerException java.lang.RuntimeException: Unable to resolve symbol: do-run in this context, compiling:(d:\Productivity\Repositories\cellular-automata-clojure\src\cellular_automata_clojure\examples\1D.clj:18:4) 
clj꞉cellular-automata-clojure.examples.1d꞉> 
; CompilerException java.lang.RuntimeException: No such namespace: core, compiling:(d:\Productivity\Repositories\cellular-automata-clojure\src\cellular_automata_clojure\examples\1D.clj:13:20) 
clj꞉cellular-automata-clojure.examples.1d꞉> 
; CompilerException java.lang.RuntimeException: Unable to resolve symbol: rule110 in this context, compiling:(d:\Productivity\Repositories\cellular-automata-clojure\src\cellular_automata_clojure\examples\1D.clj:20:5) 
clj꞉cellular-automata-clojure.examples.1d꞉> 
nil
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/-main
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/-main
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
; CompilerException java.lang.ClassNotFoundException: cellular-automata-clojure.rules, compiling:(d:\Productivity\Repositories\cellular-automata-clojure\src\cellular_automata_clojure\examples\1D.clj:14:66) 
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/-main
clj꞉cellular-automata-clojure.examples.1d꞉> 
nil
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/-main
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
; ClassCastException class clojure.lang.PersistentVector cannot be cast to class clojure.lang.Symbol (clojure.lang.PersistentVector and clojure.lang.Symbol are in unnamed module of loader 'app')  clojure.core/ns-resolve (core.clj:4335)
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.boards/lonesome-one-short
clj꞉cellular-automata-clojure.examples.1d꞉> 
; ArityException Wrong number of args (0) passed to: PersistentVector  clojure.lang.AFn.throwArity (AFn.java:429)
clj꞉cellular-automata-clojure.examples.1d꞉> 
; IllegalArgumentException Don't know how to create ISeq from: clojure.lang.Var  clojure.lang.RT.seqFrom (RT.java:550)
clj꞉cellular-automata-clojure.examples.1d꞉> 
; ClassCastException class clojure.lang.Var cannot be cast to class java.io.PushbackReader (clojure.lang.Var is in unnamed module of loader 'app'; java.io.PushbackReader is in module java.base of loader 'bootstrap')  clojure.core/read (core.clj:3733)
clj꞉cellular-automata-clojure.examples.1d꞉> 
; ArityException Wrong number of args (0) passed to: PersistentVector  clojure.lang.AFn.throwArity (AFn.java:429)
clj꞉cellular-automata-clojure.examples.1d꞉> 
; IllegalArgumentException Don't know how to create ISeq from: clojure.lang.Var  clojure.lang.RT.seqFrom (RT.java:550)
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.boards/lonesome-one-short
nil
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.boards/lonesome-one-short
nil
clj꞉cellular-automata-clojure.examples.1d꞉> 
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
nil
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.boards/lonesome-one-short
nil
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.boards/lonesome-one-short
nil
clj꞉cellular-automata-clojure.examples.1d꞉> 
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
nil
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/-main
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.examples.1d/do-run
clj꞉cellular-automata-clojure.examples.1d꞉> 
#'cellular-automata-clojure.boards/random-board
clj꞉cellular-automata-clojure.boards꞉> 
#'cellular-automata-clojure.boards/random-board
clj꞉cellular-automata-clojure.boards꞉> 
#'cellular-automata-clojure.boards/random-board-short
clj꞉cellular-automata-clojure.boards꞉> 
#'cellular-automata-clojure.boards/random-board-long
clj꞉cellular-automata-clojure.boards꞉> 
